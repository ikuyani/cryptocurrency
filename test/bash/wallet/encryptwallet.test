#!/bin/bash

# このテストはウォレットのデータを削除するため注意

v_log="${1}"
if [ -z "${v_log}" -o ! -f "${v_log}" ]; then
    v_log="./encryptwallet.sh.test.log"
    echo > "${v_log}"
fi

# 関数：ウォレットの開始
function func_start_wallet () {
    eval 'LD_LIBRARY_PATH="${TEST_LIB}" "${TEST_CLIENT}" help' > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        eval 'LD_LIBRARY_PATH="${TEST_LIB}" "${TEST_DAEMON}"' >> "${v_log}" 2>&1
        v_err=1
        for ((i=0; i < ${TEST_START_RETRY_MAX}; i++)); do
            sleep ${TEST_START_WAIT_SECOND}s
            eval 'LD_LIBRARY_PATH="${TEST_LIB}" "${TEST_CLIENT}" help' > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                v_err=0
                break
            fi
            echo "start retry ${i}" >> "${v_log}" 2>&1
        done
        if [ ${v_err} -eq 1 ]; then
            echo "${1}: Error, wallet daemon start failed." 2>&1 | tee -a "${v_log}"
            exit 1
        fi
    fi
}

# 関数：ウォレットの停止
function func_stop_wallet () {
    v_check=`ps aux | grep ${TEST_WALLET_PROCESS} | grep -v grep | wc -l`
    if [ ${v_check} -gt 0 ]; then
        eval 'LD_LIBRARY_PATH="${TEST_LIB}" "${TEST_CLIENT}" stop' >> "${v_log}" 2>&1
        v_err=1
        for ((i=0; i < ${TEST_STOP_RETRY_MAX}; i++)); do
            sleep ${TEST_STOP_WAIT_SECOND}s
            v_check=`ps aux | grep ${TEST_WALLET_PROCESS} | grep -v grep | wc -l`
            if [ ${v_check} -eq 0 ]; then
                v_err=0
                break
            fi
            echo "stop retry ${i}" >> "${v_log}" 2>&1
        done
        if [ ${v_err} -eq 1 ]; then
            echo "${1}: Error, wallet process stop failed." 2>&1 | tee -a "${v_log}"
            exit 1
        fi
    fi
}


echo "encryptwallet.sh.test: ********** START TEST *******************************" 2>&1 | tee -a "${v_log}"
source ./test.settings

# 1-1 引数チェック 
echo "encryptwallet.sh.test: start 1-1" >> "${v_log}" 2>&1
eval "${TEST_CMD_DIR}/encryptwallet.sh" >> "${v_log}" 2>&1
v_err=$?
if [ ${v_err} -eq 100 ]; then
    echo "encryptwallet.sh.test: Successful 1-1 " 2>&1 | tee -a "${v_log}"
else
    echo "encryptwallet.sh.test: Failed 1-1 ${v_err}" 2>&1 | tee -a "${v_log}"
fi

# 1-2 引数チェック
echo "encryptwallet.sh.test: start 1-2" >> "${v_log}" 2>&1
eval '"${TEST_CMD_DIR}/encryptwallet.sh" /home' >> "${v_log}" 2>&1
v_err=$?
if [ ${v_err} -eq 100 ]; then
    echo "encryptwallet.sh.test: Successful 1-2 " 2>&1 | tee -a "${v_log}"
else
    echo "encryptwallet.sh.test: Failed 1-2 ${v_err}" 2>&1 | tee -a "${v_log}"
fi


# 2-1 正常 LIB指定あり
echo "encryptwallet.sh.test: start 2-1" >> "${v_log}" 2>&1

# 停止
func_stop_wallet "encryptwallet.sh.test"

# 既存wallet.datのリネーム
v_rename=${TEST_WALLET_DAT}.rename.`date "+%Y%m%d%H%M%S"`
mv ${TEST_WALLET_DAT} ${v_rename}

# 開始
func_start_wallet "encryptwallet.sh.test"

# 処理の実行
eval '"${TEST_CMD_DIR}/encryptwallet.sh" "${TEST_SETTINGS}"' # 対話型なのでログ出力しない
v_err=$?
if [ ${v_err} -eq 0 ]; then
    # 停止
    func_stop_wallet "encryptwallet.sh.test"
    # 開始
    func_start_wallet "encryptwallet.sh.test"
    # パスフレーズ確認
    echo "設定したパスワードを入力"
    read v_passphrase
    eval 'LD_LIBRARY_PATH="${TEST_LIB}" "${TEST_CLIENT}" walletpassphrase "${v_passphrase}" 100'
    v_err=$?
    if [ ${v_err} -eq 0 ]; then
        echo "encryptwallet.sh.test: Successful 2-1 " 2>&1 | tee -a "${v_log}"
    else       
        echo "encryptwallet.sh.test: Failed 2-1(2) " 2>&1 | tee -a "${v_log}"
    fi
else
    echo "encryptwallet.sh.test: Failed 2-1(1) ${v_err}" 2>&1 | tee -a "${v_log}"
fi

# 停止
func_stop_wallet "encryptwallet.sh.test"

# wallet.datを戻す
rm ${TEST_WALLET_DAT}
mv ${v_rename} ${TEST_WALLET_DAT}

# 2-2 正常 LIB指定なし
echo "encryptwallet.sh.test: start 2-2" >> "${v_log}" 2>&1

# 停止
func_stop_wallet "encryptwallet.sh.test"

# 既存wallet.datのリネーム
v_rename=${TEST_WALLET_DAT}.rename.`date "+%Y%m%d%H%M%S"`
mv ${TEST_WALLET_DAT} ${v_rename}

# 開始
func_start_wallet "encryptwallet.sh.test"

# 処理の実行
export LD_LIBRARY_PATH="${TEST_LIB}"
eval '"${TEST_CMD_DIR}/encryptwallet.sh" "${TEST_SETTINGS_NOLIB}"' # 対話型なのでログ出力しない
v_err=$?
if [ ${v_err} -eq 0 ]; then
    # 停止
    func_stop_wallet "encryptwallet.sh.test"
    # 開始
    func_start_wallet "encryptwallet.sh.test"
    # パスフレーズ確認
    echo "設定したパスワードを入力"
    read v_passphrase
    eval '"${TEST_CLIENT}" walletpassphrase ${v_passphrase} 100'
    v_err=$?
    if [ ${v_err} -eq 0 ]; then
        echo "encryptwallet.sh.test: Successful 2-2 " 2>&1 | tee -a "${v_log}"
    else       
        echo "encryptwallet.sh.test: Failed 2-2(2) " 2>&1 | tee -a "${v_log}"
    fi
else
    echo "encryptwallet.sh.test: Failed 2-2(1) ${v_err}" 2>&1 | tee -a "${v_log}"
fi

# 停止
func_stop_wallet "encryptwallet.sh.test"

# wallet.datを戻す
rm ${TEST_WALLET_DAT}
mv ${v_rename} ${TEST_WALLET_DAT}

export LD_LIBRARY_PATH=

echo "encryptwallet.sh.test: ********** END TEST *******************************" 2>&1 | tee -a "${v_log}"


